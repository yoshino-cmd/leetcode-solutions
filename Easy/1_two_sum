"""
📘 Problem: LeetCode 1 - Two Sum
🔗 https://leetcode.com/problems/two-sum/
✅ Difficulty: Easy

🧾 Description:
Given an array of integers nums and an integer target, 
return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, 
and you may not use the same element twice.
You can return the answer in any order.

🧪 Examples:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]

Input: nums = [3,2,4], target = 6
Output: [1,2]

Input: nums = [3,3], target = 6
Output: [0,1]

🎯 Constraints:
- 2 <= nums.length <= 10^4
- -10^9 <= nums[i], target <= 10^9
- Only one valid answer exists.

🧠 Approach:
- Use a hash map (dictionary) to store numbers we've seen so far.
- For each number, calculate the complement (target - num).
- If the complement is already in the map, return the pair.

⏱ Time Complexity: O(n)
🗃 Space Complexity: O(n)
"""

class Solution:
    def twoSum(self, nums, target):
        lookup = {}
        for i, num in enumerate(nums):
            comp = target - num
            if comp in lookup:
                return [lookup[comp], i]
            lookup[num] = i
