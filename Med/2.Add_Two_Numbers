"""
📘 Problem: LeetCode 2 - Add Two Numbers
🔗 https://leetcode.com/problems/add-two-numbers/
✅ Difficulty: Medium

🧾 Description:
You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order, and each node contains a single digit.
Add the two numbers and return the sum as a linked list (also in reverse order).

🧪 Examples:
Input:  l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]   # 342 + 465 = 807

Input:  l1 = [0], l2 = [0]
Output: [0]

Input:  l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

🎯 Constraints:
- 1 <= list length <= 100
- 0 <= Node.val <= 9
- No leading zeros (except the number 0 itself)

🧠 Approach:
- 2つのリストを先頭から同時に走査し、各桁 (val) を加算
- 合計 s = x + y + carry を計算し、現在の桁は s % 10、繰り上がりは s // 10
- どちらかが尽きても、無い側は 0 として扱う
- 最後に carry が残っていたら1桁追加
- ダミーノードで結果リストを組み立てる

⏱ Time Complexity: O(max(m, n))
🗃 Space Complexity: O(max(m, n))
"""

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        dummy = ListNode(0)
        cur = dummy
        carry = 0
        p, q = l1, l2

        while p is not None or q is not None or carry:
            x = p.val if p is not None else 0
            y = q.val if q is not None else 0

            s = x + y + carry
            carry = s // 10
            cur.next = ListNode(s % 10)

            cur = cur.next
            if p is not None:
                p = p.next
            if q is not None:
                q = q.next

        return dummy.next
